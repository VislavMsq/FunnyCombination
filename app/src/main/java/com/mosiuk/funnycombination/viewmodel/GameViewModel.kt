package com.mosiuk.funnycombination.viewmodel

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class GameViewModel(
    private val emojiPool: List<String> = listOf("üçé", "üçå", "üçá", "üçí", "üçä")
) : ViewModel() {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
    var sequence by mutableStateOf(listOf(emojiPool.random()))
        private set
    var playerInput by mutableStateOf(listOf<String>())
        private set
    var isShowingSequence by mutableStateOf(false)
        private set
    var readyForNextRound by mutableStateOf(false)
        private set
    var currentMessage by mutableStateOf<String?>(null)
        private set
    var showCorrectRow by mutableStateOf(false)
        private set
    var showMistake by mutableStateOf(false)
        private set
    var mistakeInput by mutableStateOf<List<String>>(emptyList())
        private set

    val level: Int get() = sequence.size


    //–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.
    fun startGame() {
        sequence = listOf(emojiPool.random())
        playerInput = listOf()
        isShowingSequence = false
        readyForNextRound = false
        currentMessage = "–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã!"
        showCorrectRow = false
        showMistake = false
        mistakeInput = emptyList()
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞—É–∑—ã, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        viewModelScope.launch {
            delay(1200)
            isShowingSequence = true
            currentMessage = null
        }
    }


    // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    fun onSequenceShown() {
        isShowingSequence = false
        playerInput = listOf()
        currentMessage = null
        showCorrectRow = false
        showMistake = false
        mistakeInput = emptyList()
    }

    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —ç–º–æ–¥–∑–∏.
    fun onEmojiClick(emoji: String, onGameOver: (score: Int) -> Unit) {
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏–ª–∏ —Ä–∞—É–Ω–¥ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
        if (isShowingSequence || readyForNextRound || currentMessage != null || showCorrectRow || showMistake) return

        val newPlayerInput = playerInput + emoji
        playerInput = newPlayerInput

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
        val mistake =
            newPlayerInput.zip(sequence.take(newPlayerInput.size)).any { (a, b) -> a != b }
        if (mistake) {
            mistakeInput = newPlayerInput
            showMistake = true
            currentMessage = "–û—à–∏–±–∫–∞! –°—Ä–∞–≤–Ω–∏:"
            viewModelScope.launch {
                delay(1800)
                showMistake = false
                currentMessage = null
                onGameOver(sequence.size - 1)
            }
        } else if (newPlayerInput.size == sequence.size) {
            showCorrectRow = true
            currentMessage = "–£—Å–ø–µ—Ö! –°—Ä–∞–≤–Ω–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
            viewModelScope.launch {
                delay(1800)
                readyForNextRound = true
            }
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
    fun nextLevel() {
        sequence = sequence + emojiPool.random()
        playerInput = listOf()
        isShowingSequence = false
        readyForNextRound = false
        currentMessage = "–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞!"
        showCorrectRow = false
        showMistake = false
        mistakeInput = emptyList()
        viewModelScope.launch {
            delay(1200)
            isShowingSequence = true
            currentMessage = null
        }
    }
}
